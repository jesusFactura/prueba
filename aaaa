<?
/**
 * @author Carlos García Gómez      neorazorx@gmail.com
 * @copyright 2015-2017, Carlos García Gómez. All Rights Reserved. 
 */
require_model('almacen.php');
require_model('articulo.php');
require_model('cliente.php');
require_model('crm_contacto.php');
require_model('cuenta_banco_cliente.php');
require_model('cuenta_banco_proveedor.php');
require_model('fabricantes.php');
require_model('familia.php');
require_model('grupo_clientes.php');
require_model('impuesto.php');
require_model('pedido_cliente.php');
require_model('proveedor.php');
require_model('serie.php');
require_model('tarifa.php');

/**
 * Description of ie_csv_home
 *
 * @author carlos
 */
class ie_csv_home extends fs_controller {

    public $almacen;
    public $codalmacen;
    public $contiene;
    public $familia;
    public $impuesto;
    public $separador;
    public $serie;

    public function __construct($name = '', $title = 'Importar/exportar CSV', $folder = 'admin', $admin = FALSE, $shmenu = TRUE, $important = FALSE) {
        if ($name == '') {
            $name = __CLASS__;
        }

        parent::__construct($name, $title, $folder, $admin, $shmenu, $important);
    }

    protected function private_core() {
        if ($this->cluf_ok()) {
            $this->codalmacen = $this->empresa->codalmacen;
            if (isset($_REQUEST['codalmacen'])) {
                $this->codalmacen = $_REQUEST['codalmacen'];
            }

            $this->contiene = 'articulos';
            if (isset($_REQUEST['contiene'])) {
                $this->contiene = $_REQUEST['contiene'];
            }

            $this->almacen = new almacen();
            $this->familia = new familia();
            $this->impuesto = new impuesto();
            $this->separador = ';';
            if (isset($_REQUEST['separador'])) {
                $this->separador = $_REQUEST['separador'];
            }

            $this->serie = new serie();

            if (isset($_GET['export'])) {
                if ($_GET['export'] == 'clientes') {
                    $this->exportar_clientes();
                } else if ($_GET['export'] == 'contactos') {
                    $this->exportar_contactos();
                } else if ($_GET['export'] == 'proveedores') {
                    $this->exportar_proveedores();
                } else if ($_GET['export'] == 'fabricantes') {
                    $this->exportar_fabricantes();
                } else if ($_GET['export'] == 'familias') {
                    $this->exportar_familias();
                } else {
                    $this->new_error_msg('Opción de exportación desconocida.');
                }
            } else if (isset($_GET['export_fam'])) {
                $this->exportar_articulos_familia($_GET['export_fam']);
            } else if (isset($_POST['contiene'])) {
                if (is_uploaded_file($_FILES['fcsv']['tmp_name'])) {
                    if ($_POST['contiene'] == 'clientes') {
                        $this->importar_clientes();
                    } else if ($_POST['contiene'] == 'contactos') {
                        if (class_exists('crm_contacto')) {
                            $this->importar_contactos();
                        } else {
                            $this->new_error_msg('No tienes instalado el plugin CRM.');
                        }
                    } else if ($_POST['contiene'] == 'proveedores') {
                        $this->importar_proveedores();
                    } else if ($_POST['contiene'] == 'articulos') {
                        $this->importar_articulos();
                    } else if ($_POST['contiene'] == 'familias') {
                        $this->importar_familias();
                    } else if ($_POST['contiene'] == 'fabricantes') {
                        $this->importar_fabricantes();
                    } else {
                        $this->new_error_msg('Opción de importación desconocida.');
                    }
                } else {
                    $this->new_error_msg('No has seleccionado ningún archivo.');
                }
            } else {
                $this->check_menu();
                $this->share_extensions();
            }
        } else {
            $this->template = 'ie_csv_cluf';
        }
    }

    private function cluf_ok() {
        $fsvar = new fs_var();

        if (isset($_GET['cluf_ok'])) {
            $fsvar->simple_save('ie_csv_cluf', '1');
            return TRUE;
        } else if ($fsvar->simple_get('ie_csv_cluf')) {
            return TRUE;
        }
        
        return FALSE;
    }

    private function check_menu() {
        if (!$this->page->get('compras_articulos')) {
            if (file_exists(__DIR__)) {
                /// activamos las páginas del plugin
                foreach (scandir(__DIR__) as $f) {
                    if ($f != '.' AND $f != '..' AND is_string($f) AND strlen($f) > 4 AND ! is_dir($f) AND $f != __CLASS__ . '.php') {
                        $page_name = substr($f, 0, -4);

                        require_once __DIR__ . '/' . $f;
                        $new_fsc = new $page_name();

                        if (!$new_fsc->page->save()) {
                            $this->new_error_msg("Imposible guardar la página " . $page_name);
                        }

                        unset($new_fsc);
                    }
                }
            } else {
                $this->new_error_msg('No se encuentra el directorio ' . __DIR__);
            }

            $this->load_menu(TRUE);
        }
    }

    private function exportar_clientes() {
        $this->template = FALSE;
        $cliente = new cliente();
        $cuenta_banco = new cuenta_banco_cliente();

        header("content-type:application/csv;charset=UTF-8");
        header("Content-Disposition: attachment; filename=\"clientes.csv\"");
        echo "codcliente;nombre;razonsocial;cifnif;telefono1;telefono2;codgrupo;codpago;fax;email;web;direccion;codpostal;ciudad;provincia;pais;iban;swift;serie\n";

        $offset = 0;
        $clientes = $cliente->all($offset);
        while ($clientes) {
            foreach ($clientes as $cli) {
                echo $cli->codcliente . ';';
                echo $this->fix_html($cli->nombre) . ';';
                echo $this->fix_html($cli->razonsocial) . ';';
                echo trim($cli->cifnif) . ';';
                echo trim($cli->telefono1) . ';';
                echo trim($cli->telefono2) . ';';
                echo trim($cli->codgrupo) . ';';
                echo trim($cli->codpago) . ';';
                echo trim($cli->fax) . ';';
                echo $this->fix_html($cli->email) . ';';
                echo trim($cli->web) . ';';

                $direccion = FALSE;
                foreach ($cli->get_direcciones() as $dir) {
                    echo $this->fix_html($dir->direccion) . ';';
                    echo trim($dir->codpostal) . ';';
                    echo $this->fix_html($dir->ciudad) . ';';
                    echo $this->fix_html($dir->provincia) . ';';
                    echo trim($dir->codpais) . ';';
                    $direccion = TRUE;
                    break;
                }

                if (!$direccion) {
                    echo ';;;;;';
                }

                $cuenta = FALSE;
                foreach ($cuenta_banco->all_from_cliente($cli->codcliente) as $cb) {
                    echo trim($cb->iban) . ';';
                    echo trim($cb->swift) . ';';
                    $cuenta = TRUE;
                    break;
                }

                if (!$cuenta) {
                    echo ';;';
                }

                echo trim($cli->codserie) . "\n";

                $offset++;
            }

            $clientes = $cliente->all($offset);
        }
    }

    private function linea2array(&$data, &$plinea) {
        $linea = array();
        foreach ($this->custom_explode($this->separador, $data) as $i => $value) {
            if (isset($plinea[$i]) && !isset($linea[$plinea[$i]])) {
                $linea[$plinea[$i]] = $value;
            } else {
                $linea[$i] = $value;
            }
        }
        
        return $linea;
    }

    private function importar_clientes() {
        $plinea = FALSE;
        $cli0 = new cliente();
        $grupo0 = new grupo_clientes();
        $se0 = new serie();
        $series = $se0->all();
        $total = 0;

        $fcsv = fopen($_FILES['fcsv']['tmp_name'], 'r');
        if ($fcsv) {
            while (!feof($fcsv)) {
                $aux = trim(fgets($fcsv));
                if ($aux != '') {
                    if ($plinea) {
                        $linea = $this->linea2array($aux, $plinea);

                        /// ¿Existe el cliente?
                        $sql = "SELECT * FROM clientes";
                        if (isset($linea['codcliente']) AND $linea['codcliente'] != '') {
                            $sql .= " WHERE codcliente = " . $cli0->var2str($linea['codcliente']) . ";";
                        } else if ($linea['cifnif'] != '') {
                            $sql .= " WHERE cifnif = " . $cli0->var2str($linea['cifnif']) . ";";
                        } else if ($linea['email'] != '') {
                            $sql .= " WHERE email = " . $cli0->var2str($linea['email']) . ";";
                        } else {
                            $sql .= " WHERE nombre = " . $cli0->var2str($linea['nombre']) . ";";
                        }

                        $data = $this->db->select($sql);
                        if (count($linea) == count($plinea) AND ( !$data OR isset($_POST['sobreescribir']))) {
                            if ($data AND isset($_POST['sobreescribir'])) {
                                $cliente = new cliente($data[0]);
                            } else {
                                $cliente = new cliente();

                                if (isset($linea['codcliente']) AND $linea['codcliente'] != '') {
                                    $cliente->codcliente = intval($linea['codcliente']);
                                } else {
                                    $cliente->codcliente = $cliente->get_new_codigo();
                                }
                            }

                            $cliente->nombre = trim($linea['nombre']);
                            if (strlen($cliente->nombre) > 100) {
                                $cliente->nombre = substr($cliente->nombre, 0, 100);
                            }

                            $cliente->razonsocial = trim($linea['razonsocial']);
                            if (strlen($cliente->razonsocial) > 100) {
                                $cliente->razonsocial = substr($cliente->razonsocial, 0, 100);
                            } else if (strlen($cliente->razonsocial) < 1) {
                                $cliente->razonsocial = $cliente->nombre;
                            }
                            $cliente->nombrecomercial = $cliente->razonsocial;

                            $cliente->cifnif = $linea['cifnif'];
                            $cliente->telefono1 = $linea['telefono1'];
                            $cliente->telefono2 = $linea['telefono2'];
                            $cliente->fax = $linea['fax'];
                            $cliente->email = $linea['email'];
                            $cliente->web = $linea['web'];

                            if (isset($linea['codgrupo'])) {
                                $grupo = $grupo0->get($linea['codgrupo']);
                                if ($grupo) {
                                    $cliente->codgrupo = $linea['codgrupo'];
                                } else {
                                    $grupo = new grupo_clientes();
                                    $grupo->codgrupo = $linea['codgrupo'];
                                    $grupo->nombre = 'GRUPO ' . $linea['codgrupo'];
                                    if ($grupo->save()) {
                                        $cliente->codgrupo = $linea['codgrupo'];
                                    }
                                }
                            }

                            if (isset($linea['codpago'])) {
                                $cliente->codpago = $linea['codpago'];
                            }

                            $cliente->codserie = $this->empresa->codserie;
                            if ($linea['serie'] != '') {
                                /// comprobamos que exista la serie
                                foreach ($series as $se) {
                                    if ($se->codserie == $linea['serie']) {
                                        $cliente->codserie = $linea['serie'];
                                        break;
                                    }
                                }
                            }

                            if ($cliente->save()) {
                                $total++;

                                if ($linea['direccion'] != '') {
                                    $direccion = new direccion_cliente();
                                    $direccion->codcliente = $cliente->codcliente;
                                    $direccion->descripcion = 'General';

                                    foreach ($cliente->get_direcciones() as $dir) {
                                        /// si el cliente ya tiene direcciones, usamos la 1º
                                        $direccion = $dir;
                                        break;
                                    }

                                    $direccion->direccion = $linea['direccion'];
                                    $direccion->codpostal = $linea['codpostal'];
                                    $direccion->ciudad = $linea['ciudad'];
                                    $direccion->provincia = $linea['provincia'];
                                    $direccion->codpais = $linea['pais'];
                                    $direccion->save();
                                }

                                if ($linea['iban'] != '' OR $linea['swift'] != '') {
                                    $cuentab = new cuenta_banco_cliente();
                                    $cuentab->codcliente = $cliente->codcliente;

                                    foreach ($cuentab->all_from_cliente($cliente->codcliente) as $cb) {
                                        /// si el cliente ya tiene cuentas bancarias, usamos la 1º
                                        $cuentab = $cb;
                                        break;
                                    }

                                    $cuentab->iban = $linea['iban'];
                                    $cuentab->swift = $linea['swift'];
                                    $cuentab->save();
                                }
                            } else {
                                $this->new_error_msg('Error al guardar los datos del cliente.');
                            }
                        }
                    } else {
                        $plinea = $this->custom_explode($this->separador, $aux);

                        /// validamos las columnas
                        $columnas = "nombre;razonsocial;cifnif;telefono1;telefono2;fax;email;web;direccion;codpostal;ciudad;provincia;pais;iban;swift;serie";
                        if (!$this->validar_columnas($plinea, $this->custom_explode(';', $columnas))) {
                            $this->new_error_msg('El archivo no contiene las columnas necesarias.');
                            break;
                        }
                    }
                }
            }

            $this->new_message($total . ' registros importados.');
            fclose($fcsv);
        }
    }

    private function exportar_contactos() {
        $this->template = FALSE;
        $contacto = new crm_contacto();

        header("content-type:application/csv;charset=UTF-8");
        header("Content-Disposition: attachment; filename=\"contactos.csv\"");
        echo "First Name,Middle Name,Last Name,Suffix,Notes,E-mail Address,E-mail 2 Address,E-mail 3 Address,"
        . "Primary Phone,Home Phone,Home Phone 2,Mobile Phone,Home City,Home State,Home Postal Code,"
        . "Home Country,Company Main Phone,Business Phone,Business Phone 2,Company,Job Title,Department,"
        . "Business City,Business State,Business Postal Code,Business Country\n";

        $offset = 0;
        $contactos = $contacto->all($offset);
        while ($contactos) {
            foreach ($contactos as $con) {
                echo $this->fix_html($con->nombre) . ',,,,';
                echo $this->fix_html(str_replace("\n", ' ', $con->observaciones)) . ',';
                echo trim($con->email) . ',,,';
                echo trim($con->telefono1) . ',';
                echo trim($con->telefono2) . ',,,';
                echo trim($con->ciudad) . ',';
                echo trim($con->provincia) . ',';
                echo trim($con->codpostal) . ',';
                echo $con->codpais . ',,,,';
                echo trim($con->empresa) . ',';
                echo trim($con->cargo) . ',,,,,,';
                echo "\n";

                $offset++;
            }

            $contactos = $contacto->all($offset);
        }
    }

    private function importar_contactos() {
        $plinea = FALSE;
        $con0 = new crm_contacto();
        $total = 0;

        $fcsv = fopen($_FILES['fcsv']['tmp_name'], 'r');
        if ($fcsv) {
            while (!feof($fcsv)) {
                $aux = trim(fgets($fcsv));
                if ($aux != '') {
                    $aux = mb_convert_encoding($aux, 'UTF-8', mb_detect_encoding($aux, 'UTF-8, ISO-8859-1', true));

                    if ($plinea) {
                        $linea = $this->linea2array($aux, $plinea);

                        if (!isset($linea['E-mail Address'])) {
                            /// no tenemos los necesario
                        } else if ($linea['E-mail Address']) {
                            /// ¿Existe el contacto?
                            $sql = "SELECT * FROM crm_contactos WHERE email = " . $con0->var2str($linea['E-mail Address']) . ";";

                            $data = $this->db->select($sql);
                            if (count($linea) == count($plinea) AND ( !$data OR isset($_POST['sobreescribir']))) {
                                if ($data AND isset($_POST['sobreescribir'])) {
                                    $contac = $con0->get($data[0]['codcontacto']);
                                } else {
                                    $contac = new crm_contacto();
                                    $contac->email = $linea['E-mail Address'];
                                }

                                $nombre = $linea['First Name'];
                                if ($linea['Middle Name']) {
                                    $nombre .= ' ' . $linea['Middle Name'];
                                }
                                if ($linea['Last Name']) {
                                    $nombre .= ' ' . $linea['Last Name'];
                                }
                                if ($nombre) {
                                    $contac->nombre = $nombre;
                                } else {
                                    $contac->nombre = $contac->email;
                                }

                                if ($linea['Company']) {
                                    $contac->empresa = $linea['Company'];
                                }

                                if ($linea['Job Title']) {
                                    $contac->cargo = $linea['Job Title'];
                                } else if ($linea['Department']) {
                                    $contac->cargo = $linea['Department'];
                                } else if ($linea['Suffix']) {
                                    $contac->cargo = $linea['Suffix'];
                                }

                                $observaciones = '';
                                $telefonos = array();
                                if ($linea['Primary Phone']) {
                                    $telefonos[] = $linea['Primary Phone'];
                                }
                                if ($linea['Mobile Phone']) {
                                    $telefonos[] = $linea['Mobile Phone'];
                                }
                                if ($linea['Business Phone']) {
                                    $telefonos[] = $linea['Business Phone'];
                                }
                                if ($linea['Business Phone 2']) {
                                    $telefonos[] = $linea['Business Phone 2'];
                                }
                                if ($linea['Company Main Phone']) {
                                    $telefonos[] = $linea['Company Main Phone'];
                                }
                                if ($linea['Home Phone']) {
                                    $telefonos[] = $linea['Home Phone'];
                                }
                                if ($linea['Home Phone 2']) {
                                    $telefonos[] = $linea['Home Phone 2'];
                                }

                                if ($telefonos) {
                                    $contac->telefono1 = $telefonos[0];

                                    if (isset($telefonos[1])) {
                                        $contac->telefono2 = $telefonos[1];
                                    }
                                    if (isset($telefonos[2])) {
                                        $observaciones .= 'Teléfono alternativo: ' . $telefonos[2] . "\n";
                                    }
                                    if (isset($telefonos[3])) {
                                        $observaciones .= 'Teléfono alternativo: ' . $telefonos[3] . "\n";
                                    }
                                }

                                if ($linea['Business City']) {
                                    $contac->ciudad = $linea['Business City'];
                                } else if ($linea['Home City']) {
                                    $contac->ciudad = $linea['Home City'];
                                }

                                if ($linea['Business Postal Code']) {
                                    $contac->codpostal = $linea['Business Postal Code'];
                                } else if ($linea['Home Postal Code']) {
                                    $contac->codpostal = $linea['Home Postal Code'];
                                }

                                if ($linea['Business State']) {
                                    $contac->provincia = $linea['Business State'];
                                } else if ($linea['Home State']) {
                                    $contac->provincia = $linea['Home State'];
                                }

                                if ($linea['E-mail 2 Address']) {
                                    $observaciones .= 'Email alternativo: ' . $linea['E-mail 2 Address'] . "\n";
                                }
                                if ($linea['E-mail 3 Address']) {
                                    $observaciones .= 'Email alternativo: ' . $linea['E-mail 3 Address'] . "\n";
                                }
                                if ($linea['Notes']) {
                                    $observaciones .= "\n" . $linea['Notes'];
                                }

                                if ($contac->observaciones == '') {
                                    $contac->observaciones = $observaciones;
                                }

                                if ($contac->save()) {
                                    $total++;
                                } else {
                                    $this->new_error_msg('Error al guardar los datos del contacto.');
                                }
                            }
                        }
                    }
                    else {
                        $plinea = $this->custom_explode($this->separador, $aux);

                        /// validamos las columnas
                        $columnas = "First Name,Middle Name,Last Name,Suffix,Notes,E-mail Address,E-mail 2 Address,E-mail 3 Address,"
                                . "Primary Phone,Home Phone,Home Phone 2,Mobile Phone,Home City,Home State,Home Postal Code,"
                                . "Home Country,Company Main Phone,Business Phone,Business Phone 2,Company,Job Title,Department,"
                                . "Business City,Business State,Business Postal Code,Business Country";
                        if (!$this->validar_columnas($plinea, $this->custom_explode(',', $columnas))) {
                            $this->new_error_msg('El archivo no contiene las columnas necesarias.');
                            break;
                        }
                    }
                }
            }

            $this->new_message($total . ' registros importados.');
            fclose($fcsv);
        }
    }

    private function exportar_proveedores() {
        $this->template = FALSE;
        $proveedor = new proveedor();
        $cuenta_banco = new cuenta_banco_proveedor();

        header("content-type:application/csv;charset=UTF-8");
        header("Content-Disposition: attachment; filename=\"proveedores.csv\"");
        echo "codproveedor;nombre;razonsocial;cifnif;telefono1;telefono2;fax;email;web;direccion;codpostal;ciudad;provincia;pais;iban;swift;serie\n";

        $offset = 0;
        $proveedores = $proveedor->all($offset);
        while ($proveedores) {
            foreach ($proveedores as $pro) {
                echo $pro->codproveedor . ';';
                echo $this->fix_html($pro->nombre) . ';';
                echo $this->fix_html($pro->razonsocial) . ';';
                echo trim($pro->cifnif) . ';';
                echo trim($pro->telefono1) . ';';
                echo trim($pro->telefono2) . ';';
                echo trim($pro->fax) . ';';
                echo $this->fix_html($pro->email) . ';';
                echo trim($pro->web) . ';';

                $direccion = FALSE;
                foreach ($pro->get_direcciones() as $dir) {
                    echo $this->fix_html($dir->direccion) . ';';
                    echo trim($dir->codpostal) . ';';
                    echo $this->fix_html($dir->ciudad) . ';';
                    echo $this->fix_html($dir->provincia) . ';';
                    echo trim($dir->codpais) . ';';
                    $direccion = TRUE;
                    break;
                }

                if (!$direccion) {
                    echo ';;;;;';
                }

                $cuenta = FALSE;
                foreach ($cuenta_banco->all_from_proveedor($pro->codproveedor) as $cb) {
                    echo trim($cb->iban) . ';';
                    echo trim($cb->swift) . ';';
                    $cuenta = TRUE;
                    break;
                }

                if (!$cuenta) {
                    echo ';;';
                }

                echo trim($pro->codserie) . "\n";

                $offset++;
            }

            $proveedores = $proveedor->all($offset);
        }
    }

    private function importar_proveedores() {
        $plinea = FALSE;
        $pr0 = new proveedor();
        $se0 = new serie();
        $series = $se0->all();
        $total = 0;

        $fcsv = fopen($_FILES['fcsv']['tmp_name'], 'r');
        if ($fcsv) {
            while (!feof($fcsv)) {
                $aux = trim(fgets($fcsv));
                if ($aux != '') {
                    if ($plinea) {
                        $linea = $this->linea2array($aux, $plinea);

                        /// ¿Existe el proveedor?
                        $sql = "SELECT * FROM proveedores";
                        if (isset($linea['codproveedor']) AND $linea['codproveedor'] != '') {
                            $sql .= " WHERE codproveedor = " . $pr0->var2str($linea['codproveedor']) . ";";
                        } else if ($linea['cifnif'] != '') {
                            $sql .= " WHERE cifnif = " . $pr0->var2str($linea['cifnif']) . ";";
                        } else if ($linea['email'] != '') {
                            $sql .= " WHERE email = " . $pr0->var2str($linea['email']) . ";";
                        } else {
                            $sql .= " WHERE nombre = " . $pr0->var2str($linea['nombre']) . ";";
                        }

                        $data = $this->db->select($sql);
                        if (count($linea) == count($plinea) AND ( !$data OR isset($_POST['sobreescribir']))) {
                            if ($data AND isset($_POST['sobreescribir'])) {
                                $proveedor = new proveedor($data[0]);
                            } else {
                                $proveedor = new proveedor();

                                if (isset($linea['codproveedor']) AND $linea['codproveedor'] != '') {
                                    $proveedor->codproveedor = intval($linea['codproveedor']);
                                } else {
                                    $proveedor->codproveedor = $proveedor->get_new_codigo();
                                }
                            }

                            $proveedor->nombre = $linea['nombre'];
                            $proveedor->nombrecomercial = $proveedor->razonsocial = $linea['razonsocial'];
                            $proveedor->cifnif = $linea['cifnif'];
                            $proveedor->telefono1 = $linea['telefono1'];
                            $proveedor->telefono2 = $linea['telefono2'];
                            $proveedor->fax = $linea['fax'];
                            $proveedor->email = $linea['email'];
                            $proveedor->web = $linea['web'];

                            $proveedor->codserie = $this->empresa->codserie;
                            if ($linea['serie'] != '') {
                                /// comprobamos que exista la serie
                                foreach ($series as $se) {
                                    if ($se->codserie == $linea['serie']) {
                                        $proveedor->codserie = $linea['serie'];
                                        break;
                                    }
                                }
                            }

                            if ($proveedor->save()) {
                                $total++;

                                if ($linea['direccion'] != '') {
                                    $direccion = new direccion_proveedor();
                                    $direccion->codproveedor = $proveedor->codproveedor;
                                    $direccion->descripcion = 'General';

                                    foreach ($proveedor->get_direcciones() as $dir) {
                                        /// si el proveedor ya tiene direcciones, usamos la 1º
                                        $direccion = $dir;
                                        break;
                                    }

                                    $direccion->direccion = $linea['direccion'];
                                    $direccion->codpostal = $linea['codpostal'];
                                    $direccion->ciudad = $linea['ciudad'];
                                    $direccion->provincia = $linea['provincia'];
                                    $direccion->codpais = $linea['pais'];
                                    $direccion->save();
                                }

                                if ($linea['iban'] != '' OR $linea['swift'] != '') {
                                    $cuentab = new cuenta_banco_proveedor();
                                    $cuentab->codproveedor = $proveedor->codproveedor;

                                    foreach ($cuentab->all_from_proveedor($proveedor->codproveedor) as $cb) {
                                        /// si el proveedor ya tiene cuentas bancarias, usamos la 1º
                                        $cuentab = $cb;
                                        break;
                                    }

                                    $cuentab->iban = $linea['iban'];
                                    $cuentab->swift = $linea['swift'];
                                    $cuentab->save();
                                }
                            } else {
                                $this->new_error_msg('Error al guardar los datos del proveedor.');
                            }
                        }
                    }
                    else {
                        $plinea = $this->custom_explode($this->separador, $aux);

                        /// validamos las columnas
                        $columnas = "nombre;razonsocial;cifnif;telefono1;telefono2;fax;email;web;direccion;codpostal;ciudad;provincia;pais;iban;swift;serie";
                        if (!$this->validar_columnas($plinea, $this->custom_explode(';', $columnas))) {
                            $this->new_error_msg('El archivo no contiene las columnas necesarias.');
                            break;
                        }
                    }
                }
            }

            $this->new_message($total . ' registros importados.');
            fclose($fcsv);
        }
    }

    private function exportar_familias() {
        $this->template = FALSE;
        $familia = new familia();

        header("content-type:application/csv;charset=UTF-8");
        header("Content-Disposition: attachment; filename=\"familias.csv\"");
        echo "codfamilia;descripcion;madre\n";
        foreach ($familia->all() as $fam) {
            echo $fam->codfamilia . ';';
            echo $this->fix_html($fam->descripcion) . ';';
            echo $fam->madre . "\n";
        }
    }

    private function importar_familias() {
        $plinea = FALSE;
        $fam0 = new familia();
        $total = 0;

        $fcsv = fopen($_FILES['fcsv']['tmp_name'], 'r');
        if ($fcsv) {
            while (!feof($fcsv)) {
                $aux = trim(fgets($fcsv));
                if ($aux != '') {
                    if ($plinea) {
                        $linea = $this->linea2array($aux, $plinea);

                        /// ¿Acortamos?
                        if (strlen($linea['codfamilia']) > 8) {
                            $linea['codfamilia'] = substr($linea['codfamilia'], 0, 8);
                        }

                        /// ¿Existe la familia?
                        $sql = "SELECT * FROM familias  WHERE codfamilia = " . $fam0->var2str($linea['codfamilia']) . ";";
                        $data = $this->db->select($sql);
                        if (count($linea) == count($plinea) AND ( !$data OR isset($_POST['sobreescribir']))) {
                            if ($data AND isset($_POST['sobreescribir'])) {
                                $familia = new familia($data[0]);
                            } else {
                                $familia = new familia();
                                $familia->codfamilia = $linea['codfamilia'];
                            }

                            $familia->descripcion = $linea['descripcion'];

                            if ($linea['madre'] != '') {
                                $familia->madre = $linea['madre'];
                            }

                            if ($familia->save()) {
                                $total++;
                            } else {
                                $this->new_error_msg('Error al guardar los datos de la familia.');
                            }
                        }
                    }
                    else {
                        $plinea = $this->custom_explode($this->separador, $aux);

                        /// validamos las columnas
                        if (!$this->validar_columnas($plinea, $this->custom_explode(';', "codfamilia;descripcion;madre"))) {
                            $this->new_error_msg('El archivo no contiene las columnas necesarias.');
                            break;
                        }
                    }
                }
            }

            $this->new_message($total . ' registros importados.');
            $this->cache->clean();
            fclose($fcsv);
        }
    }

    private function exportar_fabricantes() {
        $this->template = FALSE;
        $fabricante = new fabricante();

        header("content-type:application/csv;charset=UTF-8");
        header("Content-Disposition: attachment; filename=\"fabricantes.csv\"");
        echo "codfabricante;nombre\n";
        foreach ($fabricante->all() as $fab) {
            echo $fab->codfabricante . ';';
            echo $this->fix_html($fab->nombre) . "\n";
        }
    }

    private function importar_fabricantes() {
        $plinea = FALSE;
        $fab0 = new fabricante();
        $total = 0;

        $fcsv = fopen($_FILES['fcsv']['tmp_name'], 'r');
        if ($fcsv) {
            while (!feof($fcsv)) {
                $aux = trim(fgets($fcsv));
                if ($aux != '') {
                    if ($plinea) {
                        $linea = $this->linea2array($aux, $plinea);

                        /// ¿Acortamos?
                        if (strlen($linea['codfabricante']) > 8) {
                            $linea['codfabricante'] = substr($linea['codfabricante'], 0, 8);
                        }

                        /// ¿Existe el fabricante?
                        $sql = "SELECT * FROM fabricantes WHERE codfabricante = " . $fab0->var2str($linea['codfabricante']) . ";";
                        $data = $this->db->select($sql);
                        if (count($linea) == count($plinea) AND ( !$data OR isset($_POST['sobreescribir']))) {
                            if ($data AND isset($_POST['sobreescribir'])) {
                                $fabricante = new fabricante($data[0]);
                            } else {
                                $fabricante = new fabricante();
                                $fabricante->codfabricante = $linea['codfabricante'];
                            }

                            $fabricante->nombre = $linea['nombre'];

                            if ($fabricante->save()) {
                                $total++;
                            } else {
                                $this->new_error_msg('Error al guardar los datos del fabricante.');
                            }
                        }
                    }
                    else {
                        $plinea = $this->custom_explode($this->separador, $aux);

                        /// validamos las columnas
                        if (!$this->validar_columnas($plinea, $this->custom_explode(';', "codfabricante;nombre"))) {
                            $this->new_error_msg('El archivo no contiene las columnas necesarias.');
                            break;
                        }
                    }
                }
            }

            $this->new_message($total . ' registros importados.');
            $this->cache->clean();
            fclose($fcsv);
        }
    }

    private function exportar_articulos_familia($fam) {
        $this->template = FALSE;
        $articulo = new articulo();
        $tarifa = new tarifa();
        $tarifas = $tarifa->all();
        $offset = 0;

        header("content-type:application/csv;charset=UTF-8");
        header("Content-Disposition: attachment; filename=\"articulos_" . $fam . ".csv\"");
        echo "referencia;codfamilia;codfabricante;descripcion;pvp;iva;codbarras;stock;coste";
        foreach ($tarifas as $i => $tar) {
            echo ';tarifa' . ($i + 1);
        }
        echo "\n";

        $sql = "SELECT * FROM articulos";
        if ($fam == '') {
            if (isset($_GET['sin'])) {
                $sql .= " WHERE codfamilia IS NULL";
            }
        } else {
            $sql .= " WHERE codfamilia = " . $articulo->var2str($fam);
        }

        /**
         * libreoffice y excel toman el punto y 3 decimales como millares,
         * así que si el usuario ha elegido 3 decimales, mejor usamos 4.
         */
        $nf0 = FS_NF0_ART;
        if ($nf0 == 3) {
            $nf0 = 4;
        }

        $data = $this->db->select_limit($sql, 100, $offset);
        while ($data) {
            foreach ($data as $d) {
                $art = new articulo($d);

                echo $art->referencia . ';';
                echo $art->codfamilia . ';';
                echo $art->codfabricante . ';';
                echo $this->fix_html(preg_replace('~[\r\n]+~', ' ', $art->descripcion)) . ';';
                echo number_format($art->pvp, $nf0, '.', '') . ';';
                echo $art->get_iva() . ';';
                echo trim($art->codbarras) . ';';
                echo $art->stockfis . ';';
                echo number_format($art->preciocoste(), $nf0, '.', '');
                foreach ($tarifas as $tar) {
                    $articulos = array($art);
                    $tar->set_precios($articulos);
                    echo ';' . number_format($articulos[0]->pvp * (100 - $articulos[0]->dtopor) / 100, $nf0, '.', '');
                }
                echo "\n";

                $offset++;
            }

            $data = $this->db->select_limit($sql, 100, $offset);
        }
    }

    private function importar_articulos() {
        $plinea = FALSE;
        $art0 = new articulo();
        $fab0 = new fabricante();
        $fabricantes = $fab0->all();
        $fam0 = new familia();
        $familias = $fam0->all();
        $impuesto = new impuesto();
        $impuestos = $impuesto->all();
        $total = 0;

        $fcsv = fopen($_FILES['fcsv']['tmp_name'], 'r');
        if ($fcsv) {
            while (!feof($fcsv)) {
                $aux = trim(fgets($fcsv));
                if ($aux != '') {
                    if ($plinea) {
                        $linea = $this->linea2array($aux, $plinea);

                        /// ¿Existe el artículo?
                        $sql = "SELECT * FROM articulos";
                        if ($linea['referencia'] == '' AND $linea['codbarras'] == '') {
                            $this->new_error_msg('Se necesita una referencia o un código de barras para identificar al artículo.');
                            break;
                        } else if ($linea['codbarras'] == '') {
                            $sql .= " WHERE referencia = " . $art0->var2str($linea['referencia']) . ";";
                        } else if ($linea['referencia'] == '') {
                            $sql .= " WHERE codbarras = " . $art0->var2str($linea['codbarras']) . ";";
                        } else {
                            $sql .= " WHERE referencia = " . $art0->var2str($linea['referencia']) . " OR codbarras = " . $art0->var2str($linea['codbarras']) . ";";
                        }

                        $data = $this->db->select($sql);
                        if (count($linea) == count($plinea) AND ( !$data OR isset($_POST['sobreescribir']))) {
                            if ($data AND isset($_POST['sobreescribir'])) {
                                $articulo = new articulo($data[0]);
                            } else {
                                $articulo = new articulo();
                                $articulo->referencia = $linea['referencia'];
                            }

                            $articulo->codbarras = $linea['codbarras'];
                            $articulo->descripcion = $linea['descripcion'];
                            $articulo->set_pvp($linea['pvp']);
                            $articulo->preciocoste = $articulo->costemedio = floatval($linea['coste']);

                            foreach ($impuestos as $imp) {
                                if ($imp->iva == floatval($linea['iva'])) {
                                    $articulo->codimpuesto = $imp->codimpuesto;
                                    break;
                                }
                            }

                            $articulo->codfamilia = NULL;
                            if ($linea['codfamilia'] != '') {
                                $encontrada = FALSE;
                                foreach ($familias as $fam) {
                                    if ($fam->codfamilia == $linea['codfamilia']) {
                                        $encontrada = TRUE;
                                        $articulo->codfamilia = $linea['codfamilia'];
                                        break;
                                    }
                                }

                                if (!$encontrada) {
                                    $fam0->codfamilia = $fam0->descripcion = $linea['codfamilia'];
                                    if ($fam0->save()) {
                                        $this->new_message('Creada la familia ' . $linea['codfamilia']);
                                        $articulo->codfamilia = $linea['codfamilia'];
                                        $familias[] = $fam0;
                                    }
                                }
                            }

                            $articulo->codfabricante = NULL;
                            if ($linea['codfabricante'] != '') {
                                $encontrado = FALSE;
                                foreach ($fabricantes as $fab) {
                                    if ($fab->codfabricante == $linea['codfabricante']) {
                                        $encontrado = TRUE;
                                        $articulo->codfabricante = $linea['codfabricante'];
                                        break;
                                    }
                                }

                                if (!$encontrado) {
                                    $fab0->codfabricante = $fab0->nombre = $linea['codfabricante'];
                                    if ($fab0->save()) {
                                        $this->new_message('Creado el fabricante ' . $linea['codfabricante']);
                                        $articulo->codfabricante = $linea['codfabricante'];
                                        $fabricantes[] = $fab0;
                                    }
                                }
                            }

                            if ($articulo->save()) {
                                $articulo->set_stock($this->codalmacen, $linea['stock']);
                                $total++;
                            } else {
                                $this->new_error_msg('Error al guardar los datos del artículo.');
                            }
                        }
                    }
                    else {
                        $plinea = $this->custom_explode($this->separador, $aux);

                        /// validamos las columnas
                        $validas = "referencia;codfamilia;codfabricante;descripcion;pvp;iva;codbarras;stock;coste";
                        if (!$this->validar_columnas($plinea, $this->custom_explode(';', $validas))) {
                            $this->new_error_msg('El archivo no contiene las columnas necesarias.');
                            break;
                        }
                    }
                }
            }

            $this->new_message($total . ' registros importados.');
            fclose($fcsv);
        }
    }

    protected function validar_columnas($cols, $valids) {
        $result = TRUE;

        if (is_array($cols) AND is_array($valids)) {
            $faltan = array();
            foreach ($valids as $val) {
                if (!in_array($val, $cols)) {
                    $faltan[] = $val;
                    $result = FALSE;
                }
            }

            if (count($faltan) == 1) {
                $this->new_error_msg('Falta la columna ' . $faltan[0]);
            } else if (count($faltan) > 1) {
                $this->new_error_msg('Faltan las columnas: ' . join(', ', $faltan) . '.');
                if (count($faltan) == count($valids)) {
                    $this->new_error_msg('¿Separador incorrecto?');
                }
            }
        } else {
            $result = FALSE;
        }

        return $result;
    }

    private function share_extensions() {
        $extensiones = array(
            array(
                'name' => 'exportar_clientes',
                'page_from' => __CLASS__,
                'page_to' => 'ventas_clientes',
                'type' => 'button',
                'text' => '<span class="glyphicon glyphicon-transfer" title="Importar/exportar"></span>',
                'params' => '&contiene=clientes'
            ),
            array(
                'name' => 'exportar_proveedores',
                'page_from' => __CLASS__,
                'page_to' => 'compras_proveedores',
                'type' => 'button',
                'text' => '<span class="glyphicon glyphicon-transfer" title="Importar/exportar"></span>',
                'params' => '&contiene=proveedores'
            ),
            array(
                'name' => 'exportar_familias',
                'page_from' => __CLASS__,
                'page_to' => 'ventas_familias',
                'type' => 'button',
                'text' => '<span class="glyphicon glyphicon-transfer" title="Importar/exportar"></span>',
                'params' => '&contiene=familias'
            ),
            array(
                'name' => 'exportar_fabricantes',
                'page_from' => __CLASS__,
                'page_to' => 'ventas_fabricantes',
                'type' => 'button',
                'text' => '<span class="glyphicon glyphicon-transfer" title="Importar/exportar"></span>',
                'params' => '&contiene=fabricantes'
            ),
            array(
                'name' => 'exportar_articulos',
                'page_from' => __CLASS__,
                'page_to' => 'ventas_articulos',
                'type' => 'button',
                'text' => '<span class="glyphicon glyphicon-transfer" title="Importar/exportar"></span>',
                'params' => '&contiene=articulos'
            ),
            array(
                'name' => 'importar_contactos',
                'page_from' => __CLASS__,
                'page_to' => 'crm_contactos',
                'type' => 'button',
                'text' => '<span class="glyphicon glyphicon-transfer" title="Importar/exportar"></span>',
                'params' => '&contiene=contactos'
            )
        );

        /// añadimos/actualizamos las extensiones
        foreach ($extensiones as $ext) {
            $fsext = new fs_extension($ext);
            if (!$fsext->save()) {
                $this->new_error_msg('Error al insertar la extensión ' . $ext['name']);
            }
        }

        /// eliminamos las que sobran
        $fsext = new fs_extension();
        foreach ($fsext->all_from(__CLASS__) as $ext) {
            $encontrada = FALSE;
            foreach ($extensiones as $ext2) {
                if ($ext->name == $ext2['name']) {
                    $encontrada = TRUE;
                    break;
                }
            }

            if (!$encontrada) {
                $ext->delete();
            }
        }
    }

    public function iframe_xid() {
        $txt = "<div class='hidden'><iframe src='https://www.facturascripts.com/comm3/index.php?page=community_stats"
                . "&add=TRUE&version=" . $this->version() . "&xid=" . $this->empresa->xid . "&plugins=" . join(',', $GLOBALS['plugins']) . "'>"
                . "</iframe></div>";
        return $txt;
    }

    protected function fix_html($txt) {
        return fs_fix_html($txt);
    }

    /**
     * Devuelve un array con los resultados después de partir una cadena usando
     * el separador $separador.
     * Tiene en cuenta los casos en que la subcadena empieza por comillas y
     * contiene el separadr dentro, como cuando exportas de excel o libreoffice:
     * columna1;"columna2;esto sigue siendo la columna 2";columna3
     * 
     * @param type $separador
     * @param type $texto
     * @return type
     */
    protected function custom_explode($separador, $texto) {
        $seplist = array();

        if (mb_detect_encoding($texto, 'UTF-8', TRUE) === FALSE) {
            /// si no es utf8, convertimos
            $texto = utf8_encode($texto);
        }

        $aux = explode($separador, $texto);
        if ($aux) {
            $agrupar = '';

            foreach ($aux as $a) {
                if ($agrupar != '') {
                    /// continuamos agrupando
                    $agrupar .= $separador . $a;

                    if (substr($a, -1) == '"') {
                        /// terminamos de agrupar
                        $seplist[] = trim(substr($agrupar, 0, -1));
                        $agrupar = '';
                    }
                } else if (substr($a, 0, 1) == '"' AND substr($a, -1) != '"') {
                    /// empezamos a agrupar
                    $agrupar = substr($a, 1);
                } else if (substr($a, 0, 1) == '"' AND substr($a, -1) == '"') {
                    $seplist[] = trim(substr($a, 1, -1));
                } else {
                    $seplist[] = trim($a);
                }
            }
        }

        return $seplist;
    }

}
?>
